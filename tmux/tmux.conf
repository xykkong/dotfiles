# ==========================
# ===  General settings  ===
# ==========================

# set Zsh as your default Tmux shell
set -g default-shell /bin/zsh

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal "screen-256color"
# Bigger history
set -g history-limit 20000

# Set the number of buffers
set -g buffer-limit 20

# No escape time for vi mode
set -sg escape-time 0

# Set the time in ms for which status line messages and other on-screen indicators are displayed
set -g remain-on-exit off

# Allow multiple commands to be entered without pressing the prefix-key again (ms)
set -g repeat-time 300

# Tmux will resize the window to the size of the smallest or largest session
setw -g aggressive-resize on

# Allow programs in the pane to change the window name
setw -g allow-rename off

# Set parent terminal title to reflect current window in tmux session
setw -g automatic-rename off
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because 0 is too far
set -g base-index 1
setw -g pane-base-index 1

# renumber windows when a window is closed
set -g renumber-windows on

# Enable mouse support. Tmux-yank use this to set its behavior
set -g mouse on


# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind C-b      # prefix
unbind "\$"     # rename-session
unbind ,        # rename-window
unbind %        # split-window -h
unbind '"'      # split-window
unbind p        # previous-window
unbind n        # next-window
unbind l        # last-window
unbind "'"      # select-window
unbind "}"        # swap-pane -D
unbind "{"        # swap-pane -U
unbind M-Up     # resize 5 rows up
unbind M-Down   # resize 5 rows down
unbind M-Right  # resize 5 rows right
unbind M-Left   # resize 5 rows left
unbind &        # kill-window
unbind "#"      # list-buffer
unbind =        # choose-buffer
unbind [        # enter copy mode to copy text or view the history
unbind ]        # paste-buffer
unbind -T copy-mode-vi 'h'

# Screen like binding
set -g prefix C-a
# Also assign Ctrl-a to send the prefix to a remote session
bind C-a send-prefix

#mapping to clear-screen
bind C-l send-keys 'C-l'

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# force a reload of the config file
bind C-r source-file ~/.tmux.conf \; display "Configuration Reloaded!"

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Create splits and vertical splits using vim shortcuts
bind v split-window -h -p 50 -c "#{pane_current_path}"
bind ^V split-window -h -p 50 -c "#{pane_current_path}"
bind s split-window -p 50 -c "#{pane_current_path}"
bind ^S split-window -p 50 -c "#{pane_current_path}"

# Pane resize in all four directions using vi bindings.
bind -r J resize-pane -L 5      # 5 px bigger to the left
bind -r K resize-pane -D 5      # 5 px bigger down
bind -r L resize-pane -U 5      # 5 px bigger up
bind -r Ç resize-pane -R 5      # 5 px bigger right

# Use prefix-vim keys to switch panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Change window
#bind -r j select-window -t :-
#bind -r ç select-window -t :+

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D


# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# Detach from session
bind d detach-client
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

# Use vi keybindings in copy and choice modes
list-keys -T copy-mode-vi

bind Escape copy-mode
bind p paste-buffer
bind C-p choose-buffer

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
#bind -T copy-mode-vi 'V' send -X select-line
#bind -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'"

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi 'C-j'            select-pane -L
bind -T copy-mode-vi 'C-k'            select-pane -D
bind -T copy-mode-vi 'C-l'            select-pane -U
bind -T copy-mode-vi 'C-ç'            select-pane -R
bind -T copy-mode-vi 'C-\'            select-pane -l
bind -T copy-mode-vi 'j'              send-keys -X cursor-left
bind -T copy-mode-vi 'k'              send-keys -X cursor-down
bind -T copy-mode-vi 'l'              send-keys -X cursor-up
bind -T copy-mode-vi 'ç'              send-keys -X cursor-right


# Plugins
set -g @tpm_plugins "                 \
  tmux-plugins/tpm                    \
  tmux-plugins/tmux-resurrect         \
  tmux-plugins/tmux-continuum         \
  tmux-plugins/Tmux-yank              \
  tmux-plugins/tmux-copycat           \
  tmux-plugins/tmux-prefix-highlight  \ 
  wfxr/tmux-power                     \
"

# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-online-status'
# set -g @plugin 'tmux-plugins/tmux-battery'
# set -g @plugin 'tmux-plugins/tmux-open'
# set -g @plugin 'sainnhe/tmux-fzf'

#Normal Mode
#    prefix–y — copies text from the command line to the clipboard.
#    prefix–Y — copy the current pane's current working directory to the clipboard.
#Copy Mode
#    y — copy selection to system clipboard.
#    Y (shift-y) — "put" selection. Equivalent to copying a selection, and pasting it to the command line.
#prefix + Ctrl-s - save
#prefix + Ctrl-r - restore
#prefix + / - regex search (strings work too)

set -g @tmux_power_theme 'moon'

set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_show_sync_mode 'on'

set -g @yank_selection 'primary' # or 'secondary' or 'clipboard'
set -g @yank_selection_mouse 'clipboard'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

run '~/.tmux/plugins/tpm/tpm'
